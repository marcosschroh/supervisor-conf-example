[unix_http_server]
file=/tmp/supervisor.sock   ; (the path to the socket file)

[supervisord]
logfile=/var/log/supervisor/supervisor.log ; (main log file;default $CWD/supervisord.log)
logfile_maxbytes=50MB        ; (max main logfile bytes b4 rotation;default 50MB)
logfile_backups=10           ; (num of main logfile rotation backups;default 10)
loglevel=info                ; (log level;default info; others: debug,warn,trace)
pidfile=/tmp/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
nodaemon=false               ; (start in foreground if true;default false)
minfds=1024                  ; (min. avail startup file descriptors;default 1024)
minprocs=200                 ; (min. avail process descriptors;default 200)

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket

[program:worker_1]
command=/home/env/bin/celery worker -A project -c 3 -Q celery --time-limit=300 --loglevel=INFO -n worker_1

; Set PYTHONPATH to the directory containing celeryconfig.py
environment=PYTHONPATH=/home/env/bin

directory=/home/project
user=[user]
numprocs=1
stdout_logfile=/var/log/celery/worker_1.log
stderr_logfile=/var/log/celery/worker_1.log
autostart=true
autorestart=true

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
;stopwaitsecs = 600

; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=997

[program:worker_2]
command=/home/bin/celery worker -A project -c 5 -Q queue_name --time-limit=300 --loglevel=INFO -n worker_2

; Set PYTHONPATH to the directory containing celeryconfig.py
environment=PYTHONPATH=/home/env/bin

directory=/home/project
user=[user]
numprocs=1
stdout_logfile=/var/log/celery/worker_2.log
stderr_logfile=/var/log/celery/worker_2.log
autostart=true
autorestart=true

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
;stopwaitsecs = 600

; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=998

[group:celeryd]
programs=worker_1,worker_2

[program:celerybeat]
; Set full path to celery program if using virtualenv
command=/home/env/bin/celery beat -A project --schedule=/var/run/celery/celerybeat-schedule --loglevel=INFO

;Set PYTHONPATH to the directory containing celeryconfig.py
environment=PYTHONPATH=/home/env/bin
directory=/home/project
user=[user]
numprocs=1
stdout_logfile=/var/log/celery/beat.log
stderr_logfile=/var/log/celery/beat.log
autostart=true
autorestart=true
startsecs=10

; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=999
```
; In this case we are controlling celery and celery beat. We want two queue, one for a special task and ; another for default tasks. You can add more services to control with supervisor, like Elasticsearch, Redis